apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv
spec:
  storageClassName: local-storage # local PV
  capacity:
    storage: 2Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  local:
    path: /data/k8s/jenkins
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - node1

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
   name: jenkins-pvc
   namespace: kube-ops
spec:
  storageClassName: local-storage
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
# 再kube-ops namespace下创建一个serviceaccount，供该namespace下的pod使用该sa
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-sa
  namespace: kube-ops

---
# 创建一个ClusterRole 为jenkins服务创建一个集群范围内的角色。
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: jenkins-clsrole
rules:
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments", "ingresses"]
    verbs: ["create", "delete", "get", "list", "watch", "patch", "update"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["create", "delete", "get", "list", "watch", "patch", "update"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["create", "delete", "get", "list", "patch", "update"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create", "delete", "get", "list", "patch", "update"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]

---
# 将sa 与 clusterrole bind, sa将获取到clusterrole指定的apiGroup, resources相应的动作权限
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: jenkins-clusterrolebinding
  namespace: kube-ops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins-clsrole
subjects:
  - kind: ServiceAccount
    name: jenkins-sa
    namespace: kube-ops

---
# 由于jenkins站点是被墙的，所以这里
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: jenkins-mirror-conf
#   namespace: kube-ops
# data:
#   nginx.conf: |
#     nginx.conf: |
#     user nginx;
#     worker_processes  3;
#     error_log  /dev/stderr;
#     events {
#       worker_connections  10240;
#     }
#     http {
#       log_format main '$remote_addr - $remote_user [$time_local] "$request" '
#                       '$status $body_bytes_sent "$http_referer" '
#                       '"$http_user_agent" "$http_x_forwarded_for" $request_time';
#       access_log    /dev/stdout main;
#       server {
#           listen 80;
#           server_name mirrors.jenkins-ci.org;
#           location / {
#             proxy_redirect off;
#             proxy_pass https://mirrors.tuna.tsinghua.edu.cn/jenkins/;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header Accept-Encoding "";
#             proxy_set_header Accept-Language "zh-CN";
#           }
#           index index.html index.htm index.php;
#           location ~ /\. {
#             deny all;
#           }
#       }
#     }
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-mirror-conf
  namespace: kube-ops
data:
  nginx.conf: |
    user nginx;
    worker_processes  3;
    error_log  /dev/stderr;
    events {
      worker_connections  10240;
    }
    http {
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" $request_time';
      access_log    /dev/stdout main;
      server {
          listen 80;
          server_name mirrors.jenkins-ci.org;
          location / {
            proxy_redirect off;
            proxy_pass https://mirrors.tuna.tsinghua.edu.cn/jenkins/;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Accept-Encoding "";
            proxy_set_header Accept-Language "zh-CN";
          }
          index index.html index.htm index.php;
          location ~ /\. {
            deny all;
          }
      }
    }

---
# 部署jenkins，已经nginx代理的镜像创酷，nginx会重定向到清华园；并利用initContainer进行挂载目录的权限修改。
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-depoly
  namespace: kube-ops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccount: jenkins-sa
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "mirrors.jenkins-ci.org"
      initContainers:
      - name: fix-permissions
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "chown -R 1000:1000 /var/jenkins_home"]  # 因为默认jenkins用户id是1000 gid也是1000 所以需要将jenkins home权限设置设置为1000
        securityContext:
          privileged: true
        volumeMounts:
        - name: jenkinshome
          mountPath: /var/jenkins_home
      containers:
      - name: mirror
        image: nginx:1.7.9
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx
          readOnly: true
      - name: jenkins
        image: jenkins/jenkins:lts
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: web
          protocol: TCP
        - containerPort: 50000
          name: agent
          protocol: TCP
        resources:
          limits:
            cpu: 1500m
            memory: 2048Mi
          requests:
            cpu: 1500m
            memory: 2048Mi
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 12
        volumeMounts:
        - name: jenkinshome
          mountPath: /var/jenkins_home
      
      volumes:
      - name: jenkinshome
        persistentVolumeClaim:
          claimName: jenkins-pvc
      - name: nginx-conf
        configMap:
          name: jenkins-mirror-conf
          items:
          - key: nginx.conf  # cm的data中的key
            path: nginx.conf  # 相对于挂载目录的路径。这个key会会在挂载的目录下生成文件。这里就是nginx.conf文件上面挂载的/ect/nginx/nginx.conf

---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-svc
  namespace: kube-ops
  labels:
    svc: jenkins
spec:
  selector:
    app: jenkins
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: web
    name: web
  - port: 50000
    name: agent
    targetPort: agent

---
# 通过nginx Ingress对外暴露jenkins服务
# 或者traefik Ingress 进行暴露

apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: jenkins-ingressroute
  namespace: kube-ops
spec:
  entryPoints:
  - web
  routes:
  - kind: Rule
    match: Host(`jenkins.k8s.local`)
    services:
    - name: jenkins-svc
      port: 8080

     